-- Explore all bojects of database

select * from INFORMATION_SCHEMA.tables;

-- TO explore all columns of the database

select * from INFORMATION_SCHEMA.columns;

-- DATE EXPLORATION

-- Find first and last order_date
-- How many years of sales are available?

select 
min(order_date) as first_order_date,
MAX(order_date) as last_order_date,
DATEDIFF(YEAR, MIN(order_date), MAX(order_date)) as order_range
from gold.fact_sales;

-- Find youngest and oldest customer
select
MIN(birth_date) as oldest_birthdate,
DATEDIFF(YEAR, MIN(birth_date), getdate()) as oldest_cust_age,
MAX(birth_date) as youngest_birthdate,
DATEDIFF(YEAR, MAX(birth_date), getdate()) as youngest_cust_age
from gold.dim_customers;

-- MESURES EXPLORATION

--Find the Total Sales
select SUM(sales_amount) as total_sales from gold.fact_sales;
--Find how many items are sold
select SUM(quantity) as total_item_sold from gold.fact_sales;
--Find the average selling price
select AVG(price) as avg_sell_price from gold.fact_sales;
--Find the Total number of Orders
select COUNT(distinct order_number) as total_order_count from gold.fact_sales;
--Find the total number of products
select COUNT(distinct product_name) as total_products from gold.dim_products;
--Find the total number of customers
select COUNT(distinct customer_id) as total_customer from gold.dim_customers;
--Find the total number of customers that has placed an order
select COUNT(distinct customer_key) as "total ordered customer count" from gold.fact_sales;

-- Generating a report that shows all key metrics

SELECT 'Total Sales' AS Measure_name, SUM(sales_amount) AS Measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity', SUM (quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Orders', COUNT (DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Nr. Products', COUNT (product_name) FROM gold.dim_products
UNION ALL
SELECT 'Total Nr. Customers', COUNT (customer_key) FROM gold.dim_customers;

-- MAGNITUDE ANALYSIS

select * from gold.fact_sales
select * from gold.dim_customers
select * from gold.dim_products

--Find total customers by countries
select
country,
COUNT(distinct customer_id) as cust_count
from gold.dim_customers
group by country
order by COUNT(distinct customer_id) desc;

--Find total customers by gender
select
gender,
COUNT(distinct customer_id) as cust_count
from gold.dim_customers
group by gender
order by COUNT(distinct customer_id) desc;

--Find total products by category
select
category,
COUNT(product_id) as total_products
from gold.dim_products
group by category
order by COUNT(product_id) desc;

--What is the average costs in each category?
select
category,
AVG(cost) as avg_cost
from gold.dim_products
group by category
order by AVG(cost) desc;

--What is the total revenue generated for each category?
select
p.category,
SUM(s.sales_amount) as total_revenue
from gold.dim_products p
right join gold.fact_sales s
on p.product_key = s.product_key
group by p.category
order by SUM(s.sales_amount) desc ;

--Find total revenue is generated by each customer
select 
c.customer_key,
coalesce(c.first_name,'') + ' ' + coalesce(c.last_name,'') as customer_name,
SUM(s.sales_amount) as total_revenue
from gold.fact_sales s
left join gold.dim_customers c
on s.customer_key = c.customer_key
group by c.customer_key,coalesce(c.first_name,'') + ' ' + coalesce(c.last_name,'')
order by SUM(s.sales_amount) desc;

--What is the distribution of sold items across countries?
SELECT
c.country,
SUM(s.quantity) AS total_sold_items
FROM gold.fact_sales s
LEFT JOIN gold.dim_customers c
ON c.customer_key = s.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;

-- RANKING ANALYSIS

-- -------- Which 5 products generate the highest revenue?
select top 5
p.product_name,
sum(s.sales_amount) as total_revenue
from gold.fact_sales s
left join gold.dim_products p
on s.product_key = p.product_key
group by p.product_name
order by sum(s.sales_amount) desc;

-- Using WINDOW functions
select * from 
(select
ROW_NUMBER() over (order by sum(s.sales_amount) desc) as rank_no,
p.product_name,
sum(s.sales_amount) as total_revenue
from gold.fact_sales s
left join gold.dim_products p
on s.product_key = p.product_key
group by p.product_name) as t
where rank_no <= 5;

-- ------- What are the 5 worst-performing products interms of sales?
select top 5
p.product_name,
sum(s.sales_amount) as total_revenue
from gold.fact_sales s
left join gold.dim_products p
on s.product_key = p.product_key
group by p.product_name
order by sum(s.sales_amount) asc;

-- Using WINDOW functions
select * from 
(select
ROW_NUMBER() over (order by sum(s.sales_amount) asc) as rank_no,
p.product_name,
sum(s.sales_amount) as total_revenue
from gold.fact_sales s
left join gold.dim_products p
on s.product_key = p.product_key
group by p.product_name) as t
where rank_no <= 5;

-- Find the Top-10 customers who have generated the high revenue.
select top 10
coalesce(c.first_name, '') + ' ' + coalesce(c.last_name, '') as customer_name,
sum(s.sales_amount) as total_revenue
from gold.fact_sales s
left join gold.dim_customers c
on s.customer_key = c.customer_key
group by coalesce(c.first_name, '') + ' ' + coalesce(c.last_name, '')
order by total_revenue desc;

-- Find the 3 customers with the fewest orders placed.
select top 3
coalesce(c.first_name, '') + ' ' + coalesce(c.last_name, '') as customer_name,
COUNT(s.order_number) as order_count
from gold.fact_sales s
left join gold.dim_customers c
on s.customer_key = c.customer_key
group by coalesce(c.first_name, '') + ' ' + coalesce(c.last_name, '')
order by order_count asc;
